// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class accesscontrolupdated extends ethereum.Event {
  get params(): accesscontrolupdated__Params {
    return new accesscontrolupdated__Params(this);
  }
}

export class accesscontrolupdated__Params {
  _event: accesscontrolupdated;

  constructor(event: accesscontrolupdated) {
    this._event = event;
  }

  get accesscontrol(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class adminchanged extends ethereum.Event {
  get params(): adminchanged__Params {
    return new adminchanged__Params(this);
  }
}

export class adminchanged__Params {
  _event: adminchanged;

  constructor(event: adminchanged) {
    this._event = event;
  }

  get previousadmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newadmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class beaconupgraded extends ethereum.Event {
  get params(): beaconupgraded__Params {
    return new beaconupgraded__Params(this);
  }
}

export class beaconupgraded__Params {
  _event: beaconupgraded;

  constructor(event: beaconupgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Collected extends ethereum.Event {
  get params(): Collected__Params {
    return new Collected__Params(this);
  }
}

export class Collected__Params {
  _event: Collected;

  constructor(event: Collected) {
    this._event = event;
  }

  get franchiseid_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ipassetid_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collector_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get collectnft_(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collectnftid_(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collectdata_(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get collectnftdata_(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class initialized extends ethereum.Event {
  get params(): initialized__Params {
    return new initialized__Params(this);
  }
}

export class initialized__Params {
  _event: initialized;

  constructor(event: initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NewCollectNFT extends ethereum.Event {
  get params(): NewCollectNFT__Params {
    return new NewCollectNFT__Params(this);
  }
}

export class NewCollectNFT__Params {
  _event: NewCollectNFT;

  constructor(event: NewCollectNFT) {
    this._event = event;
  }

  get franchiseid_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ipassetid_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collectnft_(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class upgraded extends ethereum.Event {
  get params(): upgraded__Params {
    return new upgraded__Params(this);
  }
}

export class upgraded__Params {
  _event: upgraded;

  constructor(event: upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollectModuleBase__collectResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCollectnft(): Address {
    return this.value0;
  }

  getCollectnftid(): BigInt {
    return this.value1;
  }
}

export class CollectModuleBase__collectInputCollectparams_Struct extends ethereum.Tuple {
  get franchiseid(): BigInt {
    return this[0].toBigInt();
  }

  get ipassetid(): BigInt {
    return this[1].toBigInt();
  }

  get collector(): Address {
    return this[2].toAddress();
  }

  get collectdata(): Bytes {
    return this[3].toBytes();
  }

  get collectnftinitdata(): Bytes {
    return this[4].toBytes();
  }

  get collectnftdata(): Bytes {
    return this[5].toBytes();
  }
}

export class CollectModuleBase extends ethereum.SmartContract {
  static bind(address: Address): CollectModuleBase {
    return new CollectModuleBase("CollectModuleBase", address);
  }

  default_collect_nft_impl(): Address {
    let result = super.call(
      "default_collect_nft_impl",
      "default_collect_nft_impl():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_default_collect_nft_impl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "default_collect_nft_impl",
      "default_collect_nft_impl():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  franchise_registry(): Address {
    let result = super.call(
      "franchise_registry",
      "franchise_registry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_franchise_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "franchise_registry",
      "franchise_registry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collect(
    collectparams_: CollectModuleBase__collectInputCollectparams_Struct
  ): CollectModuleBase__collectResult {
    let result = super.call(
      "collect",
      "collect((uint256,uint256,address,bytes,bytes,bytes)):(address,uint256)",
      [ethereum.Value.fromTuple(collectparams_)]
    );

    return new CollectModuleBase__collectResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_collect(
    collectparams_: CollectModuleBase__collectInputCollectparams_Struct
  ): ethereum.CallResult<CollectModuleBase__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect((uint256,uint256,address,bytes,bytes,bytes)):(address,uint256)",
      [ethereum.Value.fromTuple(collectparams_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollectModuleBase__collectResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getaccesscontrol(): Address {
    let result = super.call(
      "getaccesscontrol",
      "getaccesscontrol():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getaccesscontrol(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getaccesscontrol",
      "getaccesscontrol():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getcollectnft(franchiseid_: BigInt, ipassetid_: BigInt): Address {
    let result = super.call(
      "getcollectnft",
      "getcollectnft(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(franchiseid_),
        ethereum.Value.fromUnsignedBigInt(ipassetid_)
      ]
    );

    return result[0].toAddress();
  }

  try_getcollectnft(
    franchiseid_: BigInt,
    ipassetid_: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getcollectnft",
      "getcollectnft(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(franchiseid_),
        ethereum.Value.fromUnsignedBigInt(ipassetid_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableuuid(): Bytes {
    let result = super.call("proxiableuuid", "proxiableuuid():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableuuid(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableuuid",
      "proxiableuuid():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}
