// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CreateLicense extends ethereum.Event {
  get params(): CreateLicense__Params {
    return new CreateLicense__Params(this);
  }
}

export class CreateLicense__Params {
  _event: CreateLicense;

  constructor(event: CreateLicense) {
    this._event = event;
  }

  get _licenseId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _parentLicenseId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _licenseHolder(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _uri(): string {
    return this._event.parameters[4].value.toString();
  }

  get _revoker(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class ExecuteTerms extends ethereum.Event {
  get params(): ExecuteTerms__Params {
    return new ExecuteTerms__Params(this);
  }
}

export class ExecuteTerms__Params {
  _event: ExecuteTerms;

  constructor(event: ExecuteTerms) {
    this._event = event;
  }

  get _licenseId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class IPAssetWritten extends ethereum.Event {
  get params(): IPAssetWritten__Params {
    return new IPAssetWritten__Params(this);
  }
}

export class IPAssetWritten__Params {
  _event: IPAssetWritten;

  constructor(event: IPAssetWritten) {
    this._event = event;
  }

  get IPAssetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get mediaUrl(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RevokeLicense extends ethereum.Event {
  get params(): RevokeLicense__Params {
    return new RevokeLicense__Params(this);
  }
}

export class RevokeLicense__Params {
  _event: RevokeLicense;

  constructor(event: RevokeLicense) {
    this._event = event;
  }

  get _licenseId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TermsUpdated extends ethereum.Event {
  get params(): TermsUpdated__Params {
    return new TermsUpdated__Params(this);
  }
}

export class TermsUpdated__Params {
  _event: TermsUpdated;

  constructor(event: TermsUpdated) {
    this._event = event;
  }

  get licenseId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get processor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get termsData(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferLicense extends ethereum.Event {
  get params(): TransferLicense__Params {
    return new TransferLicense__Params(this);
  }
}

export class TransferLicense__Params {
  _event: TransferLicense;

  constructor(event: TransferLicense) {
    this._event = event;
  }

  get _licenseId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _licenseHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class IPAssetRegistry__createFranchiseRootLicenseInput_termsStruct extends ethereum.Tuple {
  get processor(): Address {
    return this[0].toAddress();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class IPAssetRegistry__createLicenseInput_termsStruct extends ethereum.Tuple {
  get processor(): Address {
    return this[0].toAddress();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class IPAssetRegistry__getLicenseResultValue0Struct extends ethereum.Tuple {
  get active(): boolean {
    return this[0].toBoolean();
  }

  get canSublicense(): boolean {
    return this[1].toBoolean();
  }

  get commercial(): boolean {
    return this[2].toBoolean();
  }

  get parentLicenseId(): BigInt {
    return this[3].toBigInt();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get revoker(): Address {
    return this[5].toAddress();
  }

  get uri(): string {
    return this[6].toString();
  }

  get termsProcessor(): Address {
    return this[7].toAddress();
  }

  get termsData(): Bytes {
    return this[8].toBytes();
  }
}

export class IPAssetRegistry__getLicenseResult {
  value0: IPAssetRegistry__getLicenseResultValue0Struct;
  value1: Address;

  constructor(
    value0: IPAssetRegistry__getLicenseResultValue0Struct,
    value1: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): IPAssetRegistry__getLicenseResultValue0Struct {
    return this.value0;
  }

  getHolder(): Address {
    return this.value1;
  }
}

export class IPAssetRegistry__readIPAssetResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get mediaUrl(): string {
    return this[2].toString();
  }

  get blockType(): i32 {
    return this[3].toI32();
  }
}

export class IPAssetRegistry extends ethereum.SmartContract {
  static bind(address: Address): IPAssetRegistry {
    return new IPAssetRegistry("IPAssetRegistry", address);
  }

  COLLECT_MODULE(): Address {
    let result = super.call("COLLECT_MODULE", "COLLECT_MODULE():(address)", []);

    return result[0].toAddress();
  }

  try_COLLECT_MODULE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "COLLECT_MODULE",
      "COLLECT_MODULE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  EVENT_EMITTER(): Address {
    let result = super.call("EVENT_EMITTER", "EVENT_EMITTER():(address)", []);

    return result[0].toAddress();
  }

  try_EVENT_EMITTER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "EVENT_EMITTER",
      "EVENT_EMITTER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FRANCHISE_REGISTRY(): Address {
    let result = super.call(
      "FRANCHISE_REGISTRY",
      "FRANCHISE_REGISTRY():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_FRANCHISE_REGISTRY(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "FRANCHISE_REGISTRY",
      "FRANCHISE_REGISTRY():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FRANCHISE_REGISTRY_OWNED_TOKEN_ID(): BigInt {
    let result = super.call(
      "FRANCHISE_REGISTRY_OWNED_TOKEN_ID",
      "FRANCHISE_REGISTRY_OWNED_TOKEN_ID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FRANCHISE_REGISTRY_OWNED_TOKEN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FRANCHISE_REGISTRY_OWNED_TOKEN_ID",
      "FRANCHISE_REGISTRY_OWNED_TOKEN_ID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LICENSING_MODULE(): Address {
    let result = super.call(
      "LICENSING_MODULE",
      "LICENSING_MODULE():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_LICENSING_MODULE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "LICENSING_MODULE",
      "LICENSING_MODULE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createFranchiseRootLicense(
    franchiseId: BigInt,
    _licenseHolder: Address,
    _uri: string,
    _revoker: Address,
    _commercial: boolean,
    _canSublicense: boolean,
    _terms: IPAssetRegistry__createFranchiseRootLicenseInput_termsStruct
  ): BigInt {
    let result = super.call(
      "createFranchiseRootLicense",
      "createFranchiseRootLicense(uint256,address,string,address,bool,bool,(address,bytes)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(franchiseId),
        ethereum.Value.fromAddress(_licenseHolder),
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromAddress(_revoker),
        ethereum.Value.fromBoolean(_commercial),
        ethereum.Value.fromBoolean(_canSublicense),
        ethereum.Value.fromTuple(_terms)
      ]
    );

    return result[0].toBigInt();
  }

  try_createFranchiseRootLicense(
    franchiseId: BigInt,
    _licenseHolder: Address,
    _uri: string,
    _revoker: Address,
    _commercial: boolean,
    _canSublicense: boolean,
    _terms: IPAssetRegistry__createFranchiseRootLicenseInput_termsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createFranchiseRootLicense",
      "createFranchiseRootLicense(uint256,address,string,address,bool,bool,(address,bytes)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(franchiseId),
        ethereum.Value.fromAddress(_licenseHolder),
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromAddress(_revoker),
        ethereum.Value.fromBoolean(_commercial),
        ethereum.Value.fromBoolean(_canSublicense),
        ethereum.Value.fromTuple(_terms)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createIPAsset(
    ipAssetType: i32,
    name: string,
    _description: string,
    mediaUrl: string,
    to: Address,
    parentIpAssetId: BigInt
  ): BigInt {
    let result = super.call(
      "createIPAsset",
      "createIPAsset(uint8,string,string,string,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(ipAssetType)),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(_description),
        ethereum.Value.fromString(mediaUrl),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(parentIpAssetId)
      ]
    );

    return result[0].toBigInt();
  }

  try_createIPAsset(
    ipAssetType: i32,
    name: string,
    _description: string,
    mediaUrl: string,
    to: Address,
    parentIpAssetId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createIPAsset",
      "createIPAsset(uint8,string,string,string,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(ipAssetType)),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(_description),
        ethereum.Value.fromString(mediaUrl),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(parentIpAssetId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createLicense(
    _tokenId: BigInt,
    _parentLicenseId: BigInt,
    _licenseHolder: Address,
    _uri: string,
    _revoker: Address,
    _commercial: boolean,
    _canSublicense: boolean,
    _terms: IPAssetRegistry__createLicenseInput_termsStruct
  ): BigInt {
    let result = super.call(
      "createLicense",
      "createLicense(uint256,uint256,address,string,address,bool,bool,(address,bytes)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_parentLicenseId),
        ethereum.Value.fromAddress(_licenseHolder),
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromAddress(_revoker),
        ethereum.Value.fromBoolean(_commercial),
        ethereum.Value.fromBoolean(_canSublicense),
        ethereum.Value.fromTuple(_terms)
      ]
    );

    return result[0].toBigInt();
  }

  try_createLicense(
    _tokenId: BigInt,
    _parentLicenseId: BigInt,
    _licenseHolder: Address,
    _uri: string,
    _revoker: Address,
    _commercial: boolean,
    _canSublicense: boolean,
    _terms: IPAssetRegistry__createLicenseInput_termsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLicense",
      "createLicense(uint256,uint256,address,string,address,bool,bool,(address,bytes)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_parentLicenseId),
        ethereum.Value.fromAddress(_licenseHolder),
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromAddress(_revoker),
        ethereum.Value.fromBoolean(_commercial),
        ethereum.Value.fromBoolean(_canSublicense),
        ethereum.Value.fromTuple(_terms)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentIdFor(sb: i32): BigInt {
    let result = super.call("currentIdFor", "currentIdFor(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sb))
    ]);

    return result[0].toBigInt();
  }

  try_currentIdFor(sb: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentIdFor",
      "currentIdFor(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(sb))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  franchiseId(): BigInt {
    let result = super.call("franchiseId", "franchiseId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_franchiseId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("franchiseId", "franchiseId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLicense(licenseId: BigInt): IPAssetRegistry__getLicenseResult {
    let result = super.call(
      "getLicense",
      "getLicense(uint256):((bool,bool,bool,uint256,uint256,address,string,address,bytes),address)",
      [ethereum.Value.fromUnsignedBigInt(licenseId)]
    );

    return changetype<IPAssetRegistry__getLicenseResult>(
      new IPAssetRegistry__getLicenseResult(
        changetype<IPAssetRegistry__getLicenseResultValue0Struct>(
          result[0].toTuple()
        ),
        result[1].toAddress()
      )
    );
  }

  try_getLicense(
    licenseId: BigInt
  ): ethereum.CallResult<IPAssetRegistry__getLicenseResult> {
    let result = super.tryCall(
      "getLicense",
      "getLicense(uint256):((bool,bool,bool,uint256,uint256,address,string,address,bytes),address)",
      [ethereum.Value.fromUnsignedBigInt(licenseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IPAssetRegistry__getLicenseResult>(
        new IPAssetRegistry__getLicenseResult(
          changetype<IPAssetRegistry__getLicenseResultValue0Struct>(
            value[0].toTuple()
          ),
          value[1].toAddress()
        )
      )
    );
  }

  getLicenseHolder(_licenseId: BigInt): Address {
    let result = super.call(
      "getLicenseHolder",
      "getLicenseHolder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );

    return result[0].toAddress();
  }

  try_getLicenseHolder(_licenseId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLicenseHolder",
      "getLicenseHolder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLicenseIdByTokenId(_tokenId: BigInt, _commercial: boolean): BigInt {
    let result = super.call(
      "getLicenseIdByTokenId",
      "getLicenseIdByTokenId(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBoolean(_commercial)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLicenseIdByTokenId(
    _tokenId: BigInt,
    _commercial: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLicenseIdByTokenId",
      "getLicenseIdByTokenId(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBoolean(_commercial)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLicenseRegistry(): Address {
    let result = super.call(
      "getLicenseRegistry",
      "getLicenseRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getLicenseRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLicenseRegistry",
      "getLicenseRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLicenseRevoker(_licenseId: BigInt): Address {
    let result = super.call(
      "getLicenseRevoker",
      "getLicenseRevoker(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );

    return result[0].toAddress();
  }

  try_getLicenseRevoker(_licenseId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLicenseRevoker",
      "getLicenseRevoker(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLicenseTokenId(_licenseId: BigInt): BigInt {
    let result = super.call(
      "getLicenseTokenId",
      "getLicenseTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );

    return result[0].toBigInt();
  }

  try_getLicenseTokenId(_licenseId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLicenseTokenId",
      "getLicenseTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLicenseURI(_licenseId: BigInt): string {
    let result = super.call(
      "getLicenseURI",
      "getLicenseURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );

    return result[0].toString();
  }

  try_getLicenseURI(_licenseId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getLicenseURI",
      "getLicenseURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getParentLicenseId(_licenseId: BigInt): BigInt {
    let result = super.call(
      "getParentLicenseId",
      "getParentLicenseId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );

    return result[0].toBigInt();
  }

  try_getParentLicenseId(_licenseId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getParentLicenseId",
      "getParentLicenseId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_licenseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLicenseActive(licenseId: BigInt): boolean {
    let result = super.call(
      "isLicenseActive",
      "isLicenseActive(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(licenseId)]
    );

    return result[0].toBoolean();
  }

  try_isLicenseActive(licenseId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLicenseActive",
      "isLicenseActive(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(licenseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLicenseSet(licenseId: BigInt): boolean {
    let result = super.call("isLicenseSet", "isLicenseSet(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(licenseId)
    ]);

    return result[0].toBoolean();
  }

  try_isLicenseSet(licenseId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLicenseSet", "isLicenseSet(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(licenseId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRootLicense(licenseId: BigInt): boolean {
    let result = super.call("isRootLicense", "isRootLicense(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(licenseId)
    ]);

    return result[0].toBoolean();
  }

  try_isRootLicense(licenseId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRootLicense",
      "isRootLicense(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(licenseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  readIPAsset(
    ipAssetId: BigInt
  ): IPAssetRegistry__readIPAssetResultValue0Struct {
    let result = super.call(
      "readIPAsset",
      "readIPAsset(uint256):((string,string,string,uint8))",
      [ethereum.Value.fromUnsignedBigInt(ipAssetId)]
    );

    return changetype<IPAssetRegistry__readIPAssetResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_readIPAsset(
    ipAssetId: BigInt
  ): ethereum.CallResult<IPAssetRegistry__readIPAssetResultValue0Struct> {
    let result = super.tryCall(
      "readIPAsset",
      "readIPAsset(uint256):((string,string,string,uint8))",
      [ethereum.Value.fromUnsignedBigInt(ipAssetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<IPAssetRegistry__readIPAssetResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _eventEmitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _licensingModule(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _franchiseRegistry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _collectModule(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class __IPAssetData_initCall extends ethereum.Call {
  get inputs(): __IPAssetData_initCall__Inputs {
    return new __IPAssetData_initCall__Inputs(this);
  }

  get outputs(): __IPAssetData_initCall__Outputs {
    return new __IPAssetData_initCall__Outputs(this);
  }
}

export class __IPAssetData_initCall__Inputs {
  _call: __IPAssetData_initCall;

  constructor(call: __IPAssetData_initCall) {
    this._call = call;
  }
}

export class __IPAssetData_initCall__Outputs {
  _call: __IPAssetData_initCall;

  constructor(call: __IPAssetData_initCall) {
    this._call = call;
  }
}

export class __RightsManager_initCall extends ethereum.Call {
  get inputs(): __RightsManager_initCall__Inputs {
    return new __RightsManager_initCall__Inputs(this);
  }

  get outputs(): __RightsManager_initCall__Outputs {
    return new __RightsManager_initCall__Outputs(this);
  }
}

export class __RightsManager_initCall__Inputs {
  _call: __RightsManager_initCall;

  constructor(call: __RightsManager_initCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class __RightsManager_initCall__Outputs {
  _call: __RightsManager_initCall;

  constructor(call: __RightsManager_initCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateFranchiseRootLicenseCall extends ethereum.Call {
  get inputs(): CreateFranchiseRootLicenseCall__Inputs {
    return new CreateFranchiseRootLicenseCall__Inputs(this);
  }

  get outputs(): CreateFranchiseRootLicenseCall__Outputs {
    return new CreateFranchiseRootLicenseCall__Outputs(this);
  }
}

export class CreateFranchiseRootLicenseCall__Inputs {
  _call: CreateFranchiseRootLicenseCall;

  constructor(call: CreateFranchiseRootLicenseCall) {
    this._call = call;
  }

  get franchiseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _licenseHolder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _revoker(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _commercial(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _canSublicense(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _terms(): CreateFranchiseRootLicenseCall_termsStruct {
    return changetype<CreateFranchiseRootLicenseCall_termsStruct>(
      this._call.inputValues[6].value.toTuple()
    );
  }
}

export class CreateFranchiseRootLicenseCall__Outputs {
  _call: CreateFranchiseRootLicenseCall;

  constructor(call: CreateFranchiseRootLicenseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateFranchiseRootLicenseCall_termsStruct extends ethereum.Tuple {
  get processor(): Address {
    return this[0].toAddress();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class CreateIPAssetCall extends ethereum.Call {
  get inputs(): CreateIPAssetCall__Inputs {
    return new CreateIPAssetCall__Inputs(this);
  }

  get outputs(): CreateIPAssetCall__Outputs {
    return new CreateIPAssetCall__Outputs(this);
  }
}

export class CreateIPAssetCall__Inputs {
  _call: CreateIPAssetCall;

  constructor(call: CreateIPAssetCall) {
    this._call = call;
  }

  get ipAssetType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get mediaUrl(): string {
    return this._call.inputValues[3].value.toString();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get parentIpAssetId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreateIPAssetCall__Outputs {
  _call: CreateIPAssetCall;

  constructor(call: CreateIPAssetCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateLicenseCall extends ethereum.Call {
  get inputs(): CreateLicenseCall__Inputs {
    return new CreateLicenseCall__Inputs(this);
  }

  get outputs(): CreateLicenseCall__Outputs {
    return new CreateLicenseCall__Outputs(this);
  }
}

export class CreateLicenseCall__Inputs {
  _call: CreateLicenseCall;

  constructor(call: CreateLicenseCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _parentLicenseId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _licenseHolder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _uri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _revoker(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _commercial(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _canSublicense(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get _terms(): CreateLicenseCall_termsStruct {
    return changetype<CreateLicenseCall_termsStruct>(
      this._call.inputValues[7].value.toTuple()
    );
  }
}

export class CreateLicenseCall__Outputs {
  _call: CreateLicenseCall;

  constructor(call: CreateLicenseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateLicenseCall_termsStruct extends ethereum.Tuple {
  get processor(): Address {
    return this[0].toAddress();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class ExecuteTermsCall extends ethereum.Call {
  get inputs(): ExecuteTermsCall__Inputs {
    return new ExecuteTermsCall__Inputs(this);
  }

  get outputs(): ExecuteTermsCall__Outputs {
    return new ExecuteTermsCall__Outputs(this);
  }
}

export class ExecuteTermsCall__Inputs {
  _call: ExecuteTermsCall;

  constructor(call: ExecuteTermsCall) {
    this._call = call;
  }

  get _licenseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteTermsCall__Outputs {
  _call: ExecuteTermsCall;

  constructor(call: ExecuteTermsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _franchiseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RevokeLicenseCall extends ethereum.Call {
  get inputs(): RevokeLicenseCall__Inputs {
    return new RevokeLicenseCall__Inputs(this);
  }

  get outputs(): RevokeLicenseCall__Outputs {
    return new RevokeLicenseCall__Outputs(this);
  }
}

export class RevokeLicenseCall__Inputs {
  _call: RevokeLicenseCall;

  constructor(call: RevokeLicenseCall) {
    this._call = call;
  }

  get _licenseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokeLicenseCall__Outputs {
  _call: RevokeLicenseCall;

  constructor(call: RevokeLicenseCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetLicenseRegistryCall extends ethereum.Call {
  get inputs(): SetLicenseRegistryCall__Inputs {
    return new SetLicenseRegistryCall__Inputs(this);
  }

  get outputs(): SetLicenseRegistryCall__Outputs {
    return new SetLicenseRegistryCall__Outputs(this);
  }
}

export class SetLicenseRegistryCall__Inputs {
  _call: SetLicenseRegistryCall;

  constructor(call: SetLicenseRegistryCall) {
    this._call = call;
  }

  get _licenseRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLicenseRegistryCall__Outputs {
  _call: SetLicenseRegistryCall;

  constructor(call: SetLicenseRegistryCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferSublicenseCall extends ethereum.Call {
  get inputs(): TransferSublicenseCall__Inputs {
    return new TransferSublicenseCall__Inputs(this);
  }

  get outputs(): TransferSublicenseCall__Outputs {
    return new TransferSublicenseCall__Outputs(this);
  }
}

export class TransferSublicenseCall__Inputs {
  _call: TransferSublicenseCall;

  constructor(call: TransferSublicenseCall) {
    this._call = call;
  }

  get licenseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get licenseHolder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferSublicenseCall__Outputs {
  _call: TransferSublicenseCall;

  constructor(call: TransferSublicenseCall) {
    this._call = call;
  }
}
